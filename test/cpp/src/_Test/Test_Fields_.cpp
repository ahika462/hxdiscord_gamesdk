// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED__Test_Test_Fields_
#include <_Test/Test_Fields_.h>
#endif
#ifndef INCLUDED_discord_GameSDK
#include <discord/GameSDK.h>
#endif
#ifndef INCLUDED_haxe_Int64Helper
#include <haxe/Int64Helper.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_ac00761f25561774_4_main,"_Test.Test_Fields_","main",0x37934dd1,"_Test.Test_Fields_.main","Test.hx",4,0x8afb218c)
namespace _Test{

void Test_Fields__obj::__construct() { }

Dynamic Test_Fields__obj::__CreateEmpty() { return new Test_Fields__obj; }

void *Test_Fields__obj::_hx_vtable = 0;

Dynamic Test_Fields__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Test_Fields__obj > _hx_result = new Test_Fields__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Test_Fields__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x50a0c7aa;
}

void Test_Fields__obj::main(){
            	HX_STACKFRAME(&_hx_pos_ac00761f25561774_4_main)
HXLINE(   5)		int result = ::discord::GameSDK_obj::create(HX_("1257932902268928020",1d,23,e4,7c),null());
HXLINE(   6)		::haxe::Log_obj::trace(result,::hx::SourceInfo(HX_("Test.hx",8c,21,fb,8a),6,HX_("_Test.Test_Fields_",d6,31,df,71),HX_("main",39,38,56,48)));
HXLINE(   7)		if ((result != 0)) {
HXLINE(   7)			return;
            		}
HXLINE(  14)		Float _hx_tmp = ::Date_obj::now()->getTime();
HXLINE(   9)		::discord::GameSDK_obj::updateActivity( ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("assets",83,48,03,4c), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("largeImage",a0,f5,1e,f3),HX_("icon",79,e7,b2,45))))
            			->setFixed(1,HX_("timestamps",dd,66,2b,6f), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("start",62,74,0b,84),::haxe::Int64Helper_obj::fromFloat(_hx_tmp))))));
HXLINE(  18)		while(true){
HXLINE(  19)			int result1 = ::discord::GameSDK_obj::runCallbacks();
HXLINE(  20)			if ((result1 != 0)) {
HXLINE(  20)				::haxe::Log_obj::trace(result1,::hx::SourceInfo(HX_("Test.hx",8c,21,fb,8a),20,HX_("_Test.Test_Fields_",d6,31,df,71),HX_("main",39,38,56,48)));
            			}
HXLINE(  22)			::Sys_obj::sleep(((Float)0.4));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Test_Fields__obj,main,(void))


Test_Fields__obj::Test_Fields__obj()
{
}

bool Test_Fields__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Test_Fields__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Test_Fields__obj_sStaticStorageInfo = 0;
#endif

::hx::Class Test_Fields__obj::__mClass;

static ::String Test_Fields__obj_sStaticFields[] = {
	HX_("main",39,38,56,48),
	::String(null())
};

void Test_Fields__obj::__register()
{
	Test_Fields__obj _hx_dummy;
	Test_Fields__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("_Test.Test_Fields_",d6,31,df,71);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Test_Fields__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Test_Fields__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Test_Fields__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Test_Fields__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Test_Fields__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace _Test
