// Generated by Haxe 4.3.4
#ifndef INCLUDED_discord_GameSDK
#define INCLUDED_discord_GameSDK

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(discord,GameSDK)

namespace discord{


class HXCPP_CLASS_ATTRIBUTES GameSDK_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef GameSDK_obj OBJ_;
		GameSDK_obj();

	public:
		enum { _hx_ClassId = 0x4636f69c };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="discord.GameSDK")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"discord.GameSDK"); }

		inline static ::hx::ObjectPtr< GameSDK_obj > __new() {
			::hx::ObjectPtr< GameSDK_obj > __this = new GameSDK_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< GameSDK_obj > __alloc(::hx::Ctx *_hx_ctx) {
			GameSDK_obj *__this = (GameSDK_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GameSDK_obj), false, "discord.GameSDK"));
			*(void **)__this = GameSDK_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~GameSDK_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("GameSDK",c8,ed,c0,56); }

		static int create(::String clientId,::hx::Null< int >  flags);
		static ::Dynamic create_dyn();

		static int runCallbacks();
		static ::Dynamic runCallbacks_dyn();

		static int registerCommand(::String command);
		static ::Dynamic registerCommand_dyn();

		static int registerSteam(int steamId);
		static ::Dynamic registerSteam_dyn();

		static void updateActivity( ::Dynamic activity);
		static ::Dynamic updateActivity_dyn();

};

} // end namespace discord

#endif /* INCLUDED_discord_GameSDK */ 
